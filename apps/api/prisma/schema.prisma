// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String?
  firstName     String
  lastName      String
  avatar        String?
  role          UserRole  @default(DEVELOPER)
  status        UserStatus @default(PENDING)
  lastLogin     DateTime?
  emailVerified Boolean   @default(false)
  mfaEnabled    Boolean   @default(false)
  mfaSecret     String?
  preferences   Json      @default("{}")
  
  // OAuth fields
  googleId      String?   @unique
  githubId      String?   @unique
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  ownedProjects     Project[]        @relation("ProjectOwner")
  projectMembers    ProjectMember[]
  reportedIssues    Issue[]          @relation("IssueReporter")
  assignedIssues    Issue[]          @relation("IssueAssignee")
  comments          Comment[]
  activities        Activity[]
  notifications     Notification[]
  auditLogs         AuditLog[]
  fileUploads       FileUpload[]
  invitationsSent   ProjectInvitation[] @relation("InvitationSender")
  watchedIssues     IssueWatcher[]

  @@map("users")
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String
  key         String        @unique
  status      ProjectStatus @default(ACTIVE)
  settings    Json          @default("{}")
  metadata    Json          @default("{}")
  
  // Owner relation
  ownerId     String
  owner       User          @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  members     ProjectMember[]
  issues      Issue[]
  invitations ProjectInvitation[]
  activities  Activity[]

  @@map("projects")
}

model ProjectMember {
  id          String              @id @default(uuid())
  role        ProjectRole         @default(DEVELOPER)
  permissions ProjectPermission[]
  joinedAt    DateTime            @default(now())
  
  // Relations
  userId      String
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId   String
  project     Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_members")
}

model ProjectInvitation {
  id          String              @id @default(uuid())
  email       String
  role        ProjectRole         @default(DEVELOPER)
  permissions ProjectPermission[]
  expiresAt   DateTime
  acceptedAt  DateTime?
  
  // Relations
  projectId   String
  project     Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  invitedById String
  invitedBy   User                @relation("InvitationSender", fields: [invitedById], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt   DateTime            @default(now())

  @@map("project_invitations")
}

model Issue {
  id                String        @id @default(uuid())
  title             String
  description       String
  status            IssueStatus   @default(OPEN)
  priority          IssuePriority @default(MEDIUM)
  severity          IssueSeverity @default(MINOR)
  type              IssueType     @default(BUG)
  tags              String[]      @default([])
  
  // Optional fields
  stepsToReproduce  String?
  expectedBehavior  String?
  actualBehavior    String?
  environment       String?
  browserInfo       String?
  deviceInfo        String?
  
  // Time tracking
  estimatedHours    Float?
  actualHours       Float?
  dueDate           DateTime?
  resolvedAt        DateTime?
  
  // Relations
  projectId         String
  project           Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  reporterId        String
  reporter          User          @relation("IssueReporter", fields: [reporterId], references: [id], onDelete: Restrict)
  assigneeId        String?
  assignee          User?         @relation("IssueAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  
  // Timestamps
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  comments          Comment[]
  attachments       Attachment[]
  activities        Activity[]
  watchers          IssueWatcher[]

  @@map("issues")
}

model Comment {
  id          String    @id @default(uuid())
  content     String
  isInternal  Boolean   @default(false)
  
  // Relations
  issueId     String
  issue       Issue     @relation(fields: [issueId], references: [id], onDelete: Cascade)
  authorId    String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  attachments Attachment[]

  @@map("comments")
}

model Attachment {
  id           String   @id @default(uuid())
  fileName     String
  originalName String
  mimeType     String
  size         Int
  url          String
  
  // Relations
  uploadedById String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  issueId      String?
  issue        Issue?   @relation(fields: [issueId], references: [id], onDelete: Cascade)
  commentId    String?
  comment      Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt    DateTime @default(now())

  @@map("attachments")
}

model IssueWatcher {
  id      String @id @default(uuid())
  
  // Relations
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  issueId String
  issue   Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())

  @@unique([userId, issueId])
  @@map("issue_watchers")
}

model Activity {
  id         String   @id @default(uuid())
  action     String
  oldValues  Json?
  newValues  Json?
  metadata   Json?
  
  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId  String?
  project    Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  issueId    String?
  issue      Issue?   @relation(fields: [issueId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt  DateTime @default(now())

  @@map("activities")
}

model Notification {
  id      String           @id @default(uuid())
  type    NotificationType
  title   String
  message String
  data    Json?
  isRead  Boolean          @default(false)
  
  // Relations
  userId  String
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime       @default(now())

  @@map("notifications")
}

model AuditLog {
  id         String   @id @default(uuid())
  action     String
  resource   String
  resourceId String
  oldValues  Json?
  newValues  Json?
  metadata   Json?
  ipAddress  String
  userAgent  String
  
  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt  DateTime @default(now())

  @@map("audit_logs")
}

model FileUpload {
  id           String   @id @default(uuid())
  fileName     String
  originalName String
  mimeType     String
  size         Int
  url          String
  
  // Relations
  uploadedById String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt    DateTime @default(now())

  @@map("file_uploads")
}

// Enums
enum UserRole {
  ADMIN
  PROJECT_MANAGER
  DEVELOPER
  QA
  VIEWER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  ON_HOLD
}

enum ProjectRole {
  OWNER
  ADMIN
  DEVELOPER
  QA
  VIEWER
}

enum ProjectPermission {
  CREATE_ISSUE
  EDIT_ISSUE
  DELETE_ISSUE
  ASSIGN_ISSUE
  RESOLVE_ISSUE
  MANAGE_MEMBERS
  MANAGE_PROJECT
  VIEW_REPORTS
  MANAGE_SETTINGS
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  IN_REVIEW
  RESOLVED
  CLOSED
  REOPENED
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  BLOCKER
}

enum IssueSeverity {
  TRIVIAL
  MINOR
  MAJOR
  CRITICAL
  BLOCKER
}

enum IssueType {
  BUG
  FEATURE
  IMPROVEMENT
  TASK
  STORY
  EPIC
}

enum NotificationType {
  ISSUE_ASSIGNED
  ISSUE_UPDATED
  ISSUE_COMMENTED
  ISSUE_RESOLVED
  PROJECT_INVITED
  MENTION
  SYSTEM
}